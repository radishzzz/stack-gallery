---
import Layout from '@/layouts/Layout.astro'
---

<Layout>
  <div class="image-stack">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
</Layout>

<style>
.image-stack {
  /* Center child image */
  display: flex;
  align-items: center;
  justify-content: center;

  /* Full screen */
  width: 100dvw;
  height: 100dvh;

  /* Optimize performance and prevent mobile scroll */
  contain: content;
}

.image-item {
  /* Overlap all images */
  position: absolute;

  /* Max Size Limit */
  max-width: var(--image-size);
  max-height: var(--image-size);

  /* 3D perspective effect and scale */
  transform: perspective(none) rotateX(-45deg) rotateY(-45deg) scale(var(--image-scale));
  transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1);

  /* Optimize performance */
  backface-visibility: hidden;
  will-change: transform;
}

.image-item.zoomed {
  transform: perspective(800px) rotateX(0deg) rotateY(0deg) scale(1);
}
</style>

<script>
/**
 * Responsive image size
 * <= 480px: 100dvw
 * 480px - 1600px: Linear scale from 480px to 800px
 * >= 1600px: 800px
 * Never exceeds 80dvh
 */
 function getImageSize(width: number, height: number) {
  const size = width <= 480
    ? width
    : width >= 1600
      ? 800
      : 480 + (width - 480) * 320 / 1120

  return Math.min(size, height * 0.8)
}

/**
 * Responsive image scale
 * <= 480px: 0.5
 * 480px - 1600px: Linear scale from 0.5 to 0.33
 * >= 1600px: 0.33
 */
 function getImageScale(width: number) {
  return Math.max(0.33, Math.min(0.5, 0.5 - (width - 480) * 0.17 / 1120))
}

function appleImageSizeAndScale(size: number, scale: number) {
  const imageStack = document.querySelector('.image-stack') as HTMLElement
  if (!imageStack) {
    return
  }

  imageStack.style.setProperty('--image-size', `${size}px`)
  imageStack.style.setProperty('--image-scale', scale.toString())
}

function setupImageLayout() {
  const width = window.innerWidth
  const height = window.innerHeight
  const size = getImageSize(width, height)
  const scale = getImageScale(width)

  appleImageSizeAndScale(size, scale)
}

function handleGlobalClick(event: MouseEvent) {
  const target = event.target as HTMLElement

  // Find closest image and toggle zoom class
  target.closest('.image-item')?.classList.toggle('zoomed')
}

document.addEventListener('astro:after-swap', () => setupImageLayout())
window.addEventListener('resize', setupImageLayout)
document.addEventListener('click', handleGlobalClick)
setupImageLayout()
</script>
