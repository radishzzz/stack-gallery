---
import Layout from '../../layouts/Layout.astro'
---

<Layout>
  <div class="counter" aria-hidden="true">[ 0%]</div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/01.webp" class="image-item" alt="image" />
  </div>
  <div class="image-wrapper">
    <img src="/02.webp" class="image-item" alt="image" />
  </div>
</Layout>

<style>
body {
  /* Full screen */
  width: 100dvw;
  height: 100dvh;

  /* Center the image wrapper */
  display: grid;
  place-items: center;

  /* Optimize performance and prevent mobile scroll */
  contain: content;
}

.counter {
}

.image-wrapper {
  /* Overlap all wrappers */
  grid-area: 1 / 1;

  /* Control child image dimensions */
  width: min(800px, 95dvw);
  aspect-ratio: 1;

  /* Center child image */
  display: grid;
  place-items: center;

  /* Mouse cursor style and click events */
  cursor: zoom-in;
  pointer-events: none;

  /* Fix aspect-ratio height calculation issue */
  overflow: hidden;

  /* Position offset with animation */
  transform: translate(var(--offset-x, 0px), var(--offset-y, 0px));
  transition: transform 0.8s cubic-bezier(0.645, 0.045, 0.355, 1);

  /* Optimize performance */
  contain: layout paint;
}

.image-wrapper.zoomed {
  cursor: zoom-out;
}

.image-item {
  /* Image dimensions */
  width: auto;
  height: auto;
  max-width: 100%;
  max-height: 100%;

  /* Maintain aspect ratio */
  object-fit: contain;

  /* Handle click events */
  pointer-events: auto;

  /* 3D perspective effect and scale */
  transform: perspective(5000px) rotateX(-45deg) rotateY(-45deg) scale(0.3);

  /* GSAP Easing Power2EaseInOut */
  transition: transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1);

  /* Optimize performance */
  will-change: transform;
  backface-visibility: hidden;
}

.image-wrapper.zoomed .image-item {
  transform: perspective(800px) rotateX(0deg) rotateY(0deg) scale(1);
}
</style>

<script>
const stackConfig = {
  spacing: 20,
  slope: -0.6,
  delay: 1000,
}

function handleClick(event: MouseEvent) {
  const target = event.target as HTMLElement

  // Find closest image wrapper and toggle zoom class
  target.closest('.image-wrapper')?.classList.toggle('zoomed')
}

function setupStack() {
  setTimeout(() => {
    const wrappers = document.querySelectorAll('.image-wrapper')
    const centerIndex = Math.floor(wrappers.length / 2)

    wrappers.forEach((element, index) => {
      const wrapper = element as HTMLElement

      // Calculate position
      const relativeIndex = centerIndex - index
      const offsetX = relativeIndex * stackConfig.spacing
      const offsetY = relativeIndex * stackConfig.spacing * stackConfig.slope

      // Apply styles
      wrapper.style.setProperty('--offset-x', `${offsetX}px`)
      wrapper.style.setProperty('--offset-y', `${offsetY}px`)
    })
  }, stackConfig.delay)
}

// 计数动画功能
function startCounterAnimation() {
  const counter = document.querySelector('.counter') as HTMLElement
  if (!counter) {
    return
  }

  const startTime = performance.now()
  const duration = 2000

  // 缓出函数 (ease-out)
  function easeOut(t: number) {
    return 1 - (1 - t) ** 3
  }

  function animate() {
    const elapsed = performance.now() - startTime
    const progress = Math.min(elapsed / duration, 1)
    const easedProgress = easeOut(progress)
    const value = Math.round(easedProgress * 100)

    counter.textContent = `[ ${value}%]`

    if (progress < 1) {
      requestAnimationFrame(animate)
    }
  }

  animate()
}

document.addEventListener('astro:page-load', () => {
  setupStack()
  startCounterAnimation()
})
document.addEventListener('click', handleClick)
setupStack()
startCounterAnimation()
</script>
