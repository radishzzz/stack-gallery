---
import Layout from '@/layouts/Layout.astro'
---

<Layout>
  <div class="image-stack">
    <img src="/01.webp" class="image-item" alt="image" />
    <img src="/02.webp" class="image-item" alt="image" />
    <img src="/03.webp" class="image-item" alt="image" />
    <img src="/04.webp" class="image-item" alt="image" />
    <img src="/05.webp" class="image-item" alt="image" />
    <img src="/06.webp" class="image-item" alt="image" />
    <img src="/07.webp" class="image-item" alt="image" />
    <img src="/08.webp" class="image-item" alt="image" />
    <img src="/09.webp" class="image-item" alt="image" />
    <img src="/10.webp" class="image-item" alt="image" />
    <img src="/11.webp" class="image-item" alt="image" />
    <img src="/12.webp" class="image-item" alt="image" />
    <img src="/13.webp" class="image-item" alt="image" />
    <img src="/14.webp" class="image-item" alt="image" />
    <img src="/15.webp" class="image-item" alt="image" />
    <img src="/16.webp" class="image-item" alt="image" />
    <img src="/17.webp" class="image-item" alt="image" />
    <img src="/18.webp" class="image-item" alt="image" />
    <img src="/19.webp" class="image-item" alt="image" />
    <img src="/20.webp" class="image-item" alt="image" />
    <img src="/21.webp" class="image-item" alt="image" />
    <img src="/22.webp" class="image-item" alt="image" />
    <img src="/23.webp" class="image-item" alt="image" />
    <img src="/24.webp" class="image-item" alt="image" />
    <img src="/25.webp" class="image-item" alt="image" />
    <img src="/26.webp" class="image-item" alt="image" />
    <img src="/27.webp" class="image-item" alt="image" />
    <img src="/28.webp" class="image-item" alt="image" />
    <img src="/29.webp" class="image-item" alt="image" />
    <img src="/30.webp" class="image-item" alt="image" />
    <img src="/31.webp" class="image-item" alt="image" />
    <img src="/32.webp" class="image-item" alt="image" />
    <img src="/33.webp" class="image-item" alt="image" />
    <img src="/34.webp" class="image-item" alt="image" />
    <img src="/35.webp" class="image-item" alt="image" />
    <img src="/36.webp" class="image-item" alt="image" />
    <img src="/37.webp" class="image-item" alt="image" />
    <img src="/38.webp" class="image-item" alt="image" />
    <img src="/39.webp" class="image-item" alt="image" />
    <img src="/40.webp" class="image-item" alt="image" />
    <img src="/41.webp" class="image-item" alt="image" />
    <img src="/42.webp" class="image-item" alt="image" />
    <img src="/43.webp" class="image-item" alt="image" />
    <img src="/44.webp" class="image-item" alt="image" />
    <img src="/45.webp" class="image-item" alt="image" />
    <img src="/46.webp" class="image-item" alt="image" />
    <img src="/47.webp" class="image-item" alt="image" />
    <img src="/48.webp" class="image-item" alt="image" />
    <img src="/49.webp" class="image-item" alt="image" />
    <img src="/50.webp" class="image-item" alt="image" />
  </div>
</Layout>

<style>
.image-stack {
  /* Center child image */
  display: flex;
  align-items: center;
  justify-content: center;

  /* Full screen */
  width: 100dvw;
  height: 100dvh;

  /* Optimize performance and prevent mobile scroll */
  contain: content;
}

.image-stack.loaded {
  --animation-duration: 0.6s;
}

.image-item {
  /* Overlap all images */
  position: absolute;

  /* Max Size Limit */
  max-width: var(--image-size);
  max-height: var(--image-size);

  /* 3D perspective effect and scale */
  transform: translate3d(var(--offset-x, 0), var(--offset-y, 0), 0) perspective(none) rotateX(-45deg) rotateY(-45deg) scale(var(--image-scale));
  transition: transform var(--animation-duration, 0.8s) cubic-bezier(0.645, 0.045, 0.355, 1);

  /* Optimize performance */
  backface-visibility: hidden;
  will-change: transform;
}

.image-stack.loaded .image-item.zoomed {
  transform: translate3d(var(--offset-x, 0), var(--offset-y, 0), 0) perspective(800px) rotateX(0deg) rotateY(0deg) scale(1);
}
</style>

<script>
const stackSlope = -0.6
const loadDelay = 1000
const switchDuration = 800

let resizeTimer: number
let cachedImageStack: HTMLElement | null = null
let cachedImages: HTMLImageElement[] | null = null
let currentCenterIndex: number | null = null
let cachedLayoutMetrics: { width: number, height: number, result: ReturnType<typeof getLayoutMetrics> } | null = null
let cachedOffsetScale: { width: number, result: number } | null = null

function cleanupResources() {
  clearTimeout(resizeTimer)
  cachedImageStack = null
  cachedImages = null
  currentCenterIndex = null
  cachedLayoutMetrics = null
  cachedOffsetScale = null
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

/**
 * Responsive image size
 * <= 480px: 100dvw
 * 480px - 1600px: Linear scale from 480px to 800px
 * >= 1600px: 800px
 * Never exceeds 80dvh
 */
function getImageSize(width: number, height: number) {
  const size = width <= 480
    ? width
    : width >= 1600
      ? 800
      : 480 + (width - 480) * 320 / 1120

  return Math.min(size, height * 0.8)
}

/**
 * Responsive image scale
 * <= 480px: 0.5
 * 480px - 1600px: Linear scale from 0.5 to 0.33
 * >= 1600px: 0.33
 */
function getImageScale(width: number) {
  return Math.max(0.33, Math.min(0.5, 0.5 - (width - 480) * 0.17 / 1120))
}

/**
 * Calculate spacing based on actual image display width
 * 480px: 63px spacing (when image is 480px × 0.5 = 240px wide)
 * 1600px: 70px spacing (when image is 800px × 0.33 = 264px wide)
 */
function getImageSpacing(size: number, scale: number) {
  return size * scale * 63 / 240
}

function getLayoutMetrics() {
  const width = window.innerWidth
  const height = window.innerHeight
  const size = getImageSize(width, height)
  const scale = getImageScale(width)
  const spacing = getImageSpacing(size, scale)

  return { size, scale, spacing }
}

function getCachedLayoutMetrics() {
  const width = window.innerWidth
  const height = window.innerHeight

  if (cachedLayoutMetrics
    && cachedLayoutMetrics.width === width
    && cachedLayoutMetrics.height === height) {
    return cachedLayoutMetrics.result
  }

  const result = getLayoutMetrics()
  cachedLayoutMetrics = { width, height, result }
  return result
}

/**
 * Responsive additional offset scale
 * <= 480px: 4.5
 * 480px - 1600px: Linear scale from 4.5 to 7
 * >= 1600px: 7
 */
function getAdditionalOffsetScale() {
  const viewportWidth = window.innerWidth
  const ratio = (viewportWidth - 480) / (1600 - 480)

  return viewportWidth >= 1600
    ? 7
    : viewportWidth <= 480
      ? 4.5
      : 4.5 + (7 - 4.5) * ratio
}

function getCachedAdditionalOffsetScale() {
  const width = window.innerWidth

  if (cachedOffsetScale && cachedOffsetScale.width === width) {
    return cachedOffsetScale.result
  }

  const result = getAdditionalOffsetScale()
  cachedOffsetScale = { width, result }
  return result
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function getImageStack() {
  return cachedImageStack ??= document.querySelector('.image-stack') as HTMLElement
}

function getImages() {
  return cachedImages ??= Array.from(document.querySelectorAll('.image-item')) as HTMLImageElement[]
}

function applyImageSizeAndScale(size: number, scale: number) {
  const imageStack = getImageStack()
  if (!imageStack) {
    return
  }

  imageStack.style.setProperty('--image-size', `${size}px`)
  imageStack.style.setProperty('--image-scale', scale.toString())
}

function applyImageOffsets(spacing: number) {
  const images = getImages()
  if (images.length === 0) {
    return
  }

  const defaultCenterIndex = Math.floor(images.length / 2)
  const centerIndex = currentCenterIndex ?? defaultCenterIndex

  images.forEach((image, index) => {
    // Calculate base position
    const relativeIndex = centerIndex - index
    let offsetX = relativeIndex * spacing
    let offsetY = relativeIndex * spacing * stackSlope

    // Apply additional offsets if the center image is zoomed
    if (images[centerIndex]?.classList.contains('zoomed')) {
      const additionalOffset = spacing * getCachedAdditionalOffsetScale()

      if (index < centerIndex) {
        // Right group: move toward top-right
        offsetX += additionalOffset
        offsetY += additionalOffset * stackSlope
      }
      else if (index > centerIndex) {
        // Left group: move toward bottom-left
        offsetX -= additionalOffset
        offsetY -= additionalOffset * stackSlope
      }
      // Center zoomed image stays at base position
    }

    // Apply styles
    image.style.setProperty('--offset-x', `${offsetX}px`)
    image.style.setProperty('--offset-y', `${offsetY}px`)
  })
}

function setupStackLayout() {
  const imageStack = getImageStack()
  const images = getImages()
  if (!imageStack || images.length === 0) {
    return
  }

  currentCenterIndex = Math.floor(images.length / 2)
  const { size, scale, spacing } = getCachedLayoutMetrics()

  applyImageSizeAndScale(size, scale)

  setTimeout(() => {
    applyImageOffsets(spacing)
  }, loadDelay)

  setTimeout(() => {
    imageStack.classList.add('loaded')
  }, loadDelay + switchDuration)
}

function updateImagePositions() {
  const { spacing } = getCachedLayoutMetrics()
  applyImageOffsets(spacing)
}

function updateStackLayout() {
  const { size, scale, spacing } = getCachedLayoutMetrics()

  applyImageSizeAndScale(size, scale)
  applyImageOffsets(spacing)
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function updateStackLayoutOnResize() {
  clearTimeout(resizeTimer)
  resizeTimer = window.setTimeout(() => {
    requestAnimationFrame(updateStackLayout)
  }, 100)
}

function handleGlobalClick(event: MouseEvent) {
  const imageStack = getImageStack()
  if (!imageStack?.classList.contains('loaded')) {
    return
  }

  const target = event.target as HTMLElement
  const clickedImage = target.closest('.image-item') as HTMLImageElement

  if (clickedImage) {
    // Get clicked image state
    const images = getImages()
    const clickedIndex = images.indexOf(clickedImage)
    const isZoomed = clickedImage.classList.contains('zoomed')

    // Update center index and clear all zoom
    currentCenterIndex = clickedIndex
    getImages().forEach(img => img.classList.remove('zoomed'))

    // Add zoom only if image isn't zoomed
    if (!isZoomed) {
      clickedImage.classList.add('zoomed')
    }

    updateImagePositions()
    return
  }

  // Click on empty space - collapse all
  if (target.closest('.image-stack')) {
    getImages().forEach(img => img.classList.remove('zoomed'))
    updateImagePositions()
  }
}

document.addEventListener('astro:before-swap', cleanupResources)
document.addEventListener('astro:after-swap', () => setupStackLayout())
window.addEventListener('resize', updateStackLayoutOnResize)
document.addEventListener('click', handleGlobalClick)
setupStackLayout()
</script>
