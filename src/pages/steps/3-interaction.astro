---
import Layout from '@/layouts/Layout.astro'
---

<Layout>
  <div class="image-stack">
    <img src="/01.webp" class="image-item" alt="image" />
    <img src="/02.webp" class="image-item" alt="image" />
    <img src="/03.webp" class="image-item" alt="image" />
    <img src="/04.webp" class="image-item" alt="image" />
    <img src="/05.webp" class="image-item" alt="image" />
    <img src="/06.webp" class="image-item" alt="image" />
    <img src="/07.webp" class="image-item" alt="image" />
    <img src="/08.webp" class="image-item" alt="image" />
    <img src="/09.webp" class="image-item" alt="image" />
    <img src="/10.webp" class="image-item" alt="image" />
    <img src="/11.webp" class="image-item" alt="image" />
    <img src="/12.webp" class="image-item" alt="image" />
    <img src="/13.webp" class="image-item" alt="image" />
    <img src="/14.webp" class="image-item" alt="image" />
    <img src="/15.webp" class="image-item" alt="image" />
    <img src="/16.webp" class="image-item" alt="image" />
    <img src="/17.webp" class="image-item" alt="image" />
    <img src="/18.webp" class="image-item" alt="image" />
    <img src="/19.webp" class="image-item" alt="image" />
    <img src="/20.webp" class="image-item" alt="image" />
    <img src="/21.webp" class="image-item" alt="image" />
    <img src="/22.webp" class="image-item" alt="image" />
    <img src="/23.webp" class="image-item" alt="image" />
    <img src="/24.webp" class="image-item" alt="image" />
    <img src="/25.webp" class="image-item" alt="image" />
    <img src="/26.webp" class="image-item" alt="image" />
    <img src="/27.webp" class="image-item" alt="image" />
    <img src="/28.webp" class="image-item" alt="image" />
    <img src="/29.webp" class="image-item" alt="image" />
    <img src="/30.webp" class="image-item" alt="image" />
    <img src="/31.webp" class="image-item" alt="image" />
    <img src="/32.webp" class="image-item" alt="image" />
    <img src="/33.webp" class="image-item" alt="image" />
    <img src="/34.webp" class="image-item" alt="image" />
    <img src="/35.webp" class="image-item" alt="image" />
    <img src="/36.webp" class="image-item" alt="image" />
    <img src="/37.webp" class="image-item" alt="image" />
    <img src="/38.webp" class="image-item" alt="image" />
    <img src="/39.webp" class="image-item" alt="image" />
    <img src="/40.webp" class="image-item" alt="image" />
    <img src="/41.webp" class="image-item" alt="image" />
    <img src="/42.webp" class="image-item" alt="image" />
    <img src="/43.webp" class="image-item" alt="image" />
    <img src="/44.webp" class="image-item" alt="image" />
    <img src="/45.webp" class="image-item" alt="image" />
    <img src="/46.webp" class="image-item" alt="image" />
    <img src="/47.webp" class="image-item" alt="image" />
    <img src="/48.webp" class="image-item" alt="image" />
    <img src="/49.webp" class="image-item" alt="image" />
    <img src="/50.webp" class="image-item" alt="image" />
  </div>
</Layout>

<style>
.image-stack {
  /* Center child image */
  display: flex;
  align-items: center;
  justify-content: center;

  /* Full screen */
  width: 100dvw;
  height: 100dvh;

  /* Optimize performance and prevent mobile scroll */
  contain: content;
}

.image-item {
  /* Overlap all images */
  position: absolute;

  /* Max Size Limit */
  max-width: var(--image-size);
  max-height: var(--image-size);

  /* 3D perspective effect and scale */
  transform: translate3d(var(--offset-x, 0), var(--offset-y, 0), 0) perspective(none) rotateX(-45deg) rotateY(-45deg) scale(var(--image-scale));
  transition: transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1);

  /* Cursor style */
  cursor: zoom-in;

  /* Optimize performance */
  backface-visibility: hidden;
  will-change: transform;
}

.image-stack.loading .image-item {
  transition: transform 0.8s cubic-bezier(0.645, 0.045, 0.355, 1);
}

.image-stack:not(.loading) .image-item:not(.zoomed):hover {
  transform: translate3d(var(--offset-x, 0), var(--offset-y, 0), 0) perspective(none) rotateX(-45deg) rotateY(-45deg) scale(calc(var(--image-scale) * 1.1));
}

.image-stack:not(.loading) .image-item.zoomed {
  transform: translate3d(var(--offset-x, 0), var(--offset-y, 0), 0) perspective(800px) rotateX(0deg) rotateY(0deg) scale(1);
  cursor: zoom-out;
}
</style>

<script>
const stackConfig = {
  slope: -0.6,
  delay: 1000,
}

let cachedImageStack: HTMLElement | null = null
let cachedImages: HTMLElement[] | null = null

function getImageStack() {
  return cachedImageStack ??= document.querySelector('.image-stack') as HTMLElement
}

function getImages() {
  return cachedImages ??= Array.from(document.querySelectorAll('.image-item')) as HTMLElement[]
}

/**
 * Responsive image size
 * <= 480px: 100dvw
 * 480px - 1600px: Linear scale from 480px to 800px
 * >= 1600px: 800px
 * Never exceeds 80dvh
 */
function calculateImageSize(width: number, height: number) {
  const size = width <= 480
    ? width
    : width >= 1600
      ? 800
      : 480 + (width - 480) * 320 / 1120

  return Math.min(size, height * 0.8)
}

/**
 * Responsive image scale
 * <= 480px: 0.5
 * 480px - 1600px: Linear scale from 0.5 to 0.33
 * >= 1600px: 0.33
 */
function calculateImageScale(width: number) {
  return Math.max(0.33, Math.min(0.5, 0.5 - (width - 480) * 0.17 / 1120))
}

/**
 * Calculate spacing based on actual image display width
 * 1600px: 70px spacing (when image is 800px × 0.33 = 264px wide)
 * 480px: 63px spacing (when image is 480px × 0.5 = 240px wide)
 */
function calculateImageSpacing(size: number, scale: number) {
  return size * scale * 63 / 240
}

function updateImageStyles(size: number, scale: number) {
  const imageStack = getImageStack()
  if (!imageStack) {
    return
  }

  imageStack.style.setProperty('--image-size', `${size}px`)
  imageStack.style.setProperty('--image-scale', scale.toString())
}

function addLoadingState() {
  const imageStack = getImageStack()
  if (imageStack) {
    imageStack.classList.add('loading')
  }
}

function removeLoadingState() {
  const imageStack = getImageStack()
  if (imageStack) {
    imageStack.classList.remove('loading')
  }
}

function updateImageOffsets(spacing: number) {
  const images = getImages()
  if (images.length === 0) {
    return
  }

  const centerIndex = Math.floor(images.length / 2)

  images.forEach((element, index) => {
    const image = element as HTMLImageElement

    // Calculate position
    const relativeIndex = centerIndex - index
    const offsetX = relativeIndex * spacing
    const offsetY = relativeIndex * spacing * stackConfig.slope

    // Apply styles
    image.style.setProperty('--offset-x', `${offsetX}px`)
    image.style.setProperty('--offset-y', `${offsetY}px`)
  })
}

function setupStackLayout() {
  const width = window.innerWidth
  const height = window.innerHeight
  const size = calculateImageSize(width, height)
  const scale = calculateImageScale(width)
  const spacing = calculateImageSpacing(size, scale)

  // Add temporary loading state
  addLoadingState()
  updateImageStyles(size, scale)

  setTimeout(() => {
    updateImageOffsets(spacing)
  }, stackConfig.delay)

  // Remove loading state after animation completed
  setTimeout(() => {
    removeLoadingState()
  }, stackConfig.delay + 800)
}

function updateStackLayout() {
  const width = window.innerWidth
  const height = window.innerHeight
  const size = calculateImageSize(width, height)
  const scale = calculateImageScale(width)
  const spacing = calculateImageSpacing(size, scale)

  updateImageStyles(size, scale)
  updateImageOffsets(spacing)
}

function handleClick(event: MouseEvent) {
  const target = event.target as HTMLElement

  // Find closest image and toggle zoom class
  target.closest('.image-item')?.classList.toggle('zoomed')
}

document.addEventListener('astro:page-load', () => setupStackLayout())
window.addEventListener('resize', updateStackLayout)
document.addEventListener('click', handleClick)
setupStackLayout()
</script>
